<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title><![CDATA[한화뽕에 차서 만든 이글스 슬랙봇]]></title>
      <url>/2018/09/04/eagles-slackbot/</url>
      <content type="html"><![CDATA[<hr>
<p>요즘 11년만에 가을 야구를 할 수 있을것 같다는 기대감에 하루하루 야구보는 낙으로 살고있다.<br>한화뽕에 가득차서 만들게 된 한화 이글스 슬랙봇!(별건 아니고 최근 경기 스코어를 찍어줌)<br>KBO에서 API를 제공하지 않을까? 라는 헛된 기대로 찾아봤지만 역시나 없었음.<br>(KBO 홈페이지에 API 제공 관련해서 올 초에 올라온 문의에도 아직 답변이 안달림; <del>관리좀 해주세요 크보여…</del>)</p>
<p>Lamba에 Python으로 구현했고, BeautifulSoup을 이용해서 대충 한화이글스 홈 메인페이지에서 긁어오도로 했다.<br>그리고 AWS API Gateway에서 해당 Lambda를 맵핑시켜주면 짱 쉽게 API 하나 뽑은거임.</p>
<p><img src="/images/eagles_bot.jpeg" alt="왤케 화질구지야"></p>
<p>선발 숨차게 보이는건 귀찮아서 나중에 수정할 예정,,,</p>
<p>대충 만들고나니 깨달은 것 두가지</p>
<ol>
<li>홈페이지 리뉴얼되면 못씀;</li>
<li>실제로 야구할 시간엔 슬랙을 쓸일이 거의 없다. 실시간 스코어를 슬랙으로 찍어볼일이… 야근 or 주말 근무를 하지 않는 이상….</li>
</ol>
]]></content>
      
        
        <tags>
            
            <tag> Lambda </tag>
            
            <tag> Slackbot </tag>
            
            <tag> API Gateway </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Principles of Effective Story Writing - The Pivotal Labs Way]]></title>
      <url>/2018/08/01/userstory/</url>
      <content type="html"><![CDATA[<hr>
<p><a href="https://www.pivotaltracker.com/blog/principles-of-effective-story-writing-the-pivotal-labs-way/" target="_blank" rel="external">pivotal labs에서 pivotal tracker를 이용하여 효과적으로 스토리를 작성하는 방법</a>에 대한 아티클을 대충 번역해서 정리해봄.</p>
<p><img src="/images/pivotal.png" alt=""></p>
<h3 id="스토리란"><a href="#스토리란" class="headerlink" title="스토리란?"></a>스토리란?</h3><p>대화와 그 문맥에 대한 placeholder<br>작은 디테일들을 포함할 필요가 없으나, 이야기한 내용을 상기시켜야 하며 모든것을 high level에서 포함해야함<br>how 가 아닌 what 이 진술되어야 함<br>기술적으로 규범화된것이 아니므로, 엔지니어링 팀이 문제의 기능을 구현할 수있는 정확한 정보를 지정할 필요가 없음<br>기능의 이유와 그 기능이 무엇인지 정확하게 설명해야함<br>모든 스토리는 INVEST 모델을 따라야함</p>
<h4 id="INVEST-model"><a href="#INVEST-model" class="headerlink" title="INVEST model"></a>INVEST model</h4><p>Independent : 의존되지않고 릴리즈 할수있어야함<br>Negotiable : 토론할 준비가 돼있고 팀 인풋에 따라 조정될수있음<br>Valuable : end user 에게 가치를 제공함<br>Estimatable : 개발팀은 스토리의 복잡성을 추정할 수 있음<br>Small : 실제 가치를 제공하는 선에서 가능한 작아야함<br>testable : 테스트의 승인 기준을 포함</p>
<h3 id="다양한-스토리-타입들"><a href="#다양한-스토리-타입들" class="headerlink" title="다양한 스토리 타입들"></a>다양한 스토리 타입들</h3><h4 id="기능-사용자-스토리-feature"><a href="#기능-사용자-스토리-feature" class="headerlink" title="기능 / 사용자 스토리 (feature)"></a>기능 / 사용자 스토리 (feature)</h4><p>기능 스토리는 유저에게 가치를 제공하는 제품에 추가될수 있는 가장 작은 추가적 기능의 누구에게, 무엇을, 왜를 설명할수 있도록 디자인됨<br>기능 스토리는 개발팀에 의해 포인트가 매겨지고 기능을 완료하는데 걸리는 시간이 아닌 복잡도로 평가됨<br>유저의 관점에서 작성되고 개발팀의 가벼운 요구사항 문서로서의 역할을 함<br>INVEST 모델에 따라 이들은 독립적이어야하며 사용자에게 확실한 가치를 제공해야함</p>
<h5 id="feature에-포함되어야-하는-것들"><a href="#feature에-포함되어야-하는-것들" class="headerlink" title="feature에 포함되어야 하는 것들"></a>feature에 포함되어야 하는 것들</h5><ul>
<li>title<ul>
<li>제목은 짧아야하며 설명가능하고 특정 사용자나 개인을 포함해야함</li>
<li>예를들어 사용자/개인은 단순히 ‘사용자’가 아닌 특정 타입의 사용자거나 개인이름(예: 토마스)이어야 함</li>
<li>사람이 아니라 시스템이 사용자인 경우에도 동일하게 작용함(예: 구매 API)</li>
</ul>
</li>
<li>business case<ul>
<li>누가, 왜, 무엇을 원하는지를 서술</li>
<li>팀의 모든 구성원들이 해당 기능이 추가되어야하는 이유를 이해할 수 있어야함</li>
<li>이유를 생각할수 없다면 그 기능이 포함되어야 하는지 다시 판단해봐야함</li>
<li>비지니스 케이스를 통해 팀원들은 제공된것보다 나은 사용자 경험이 있는지 생각해볼수 있음</li>
</ul>
</li>
<li>acceptance criteria (수락기준?)<ul>
<li>스토리가 완료되었는지 확인하기 위해 따라야할 사항을 정의함</li>
<li>해당 스토리를 작업(?)한 개발자는 그것을 제공하기전에 수락 기준을 따라야함</li>
<li>syntax<ul>
<li>GIVEN [필요한 context] WHEN [action] THEN [reaction]</li>
<li>수용 기준에 여러번의 ‘and’를 쓰는걸 발견한다면 스토리를 더 쪼개야 함</li>
</ul>
</li>
</ul>
</li>
<li>notes<ul>
<li>스토리에 필요한 추가적인 정보를 포함함</li>
<li>ex: 디자인노트, 개발자 노트…</li>
</ul>
</li>
<li>resources<ul>
<li>기능스토리를 전달하는데 도움을 주는 것들</li>
<li>ex: 목업, 와이어프레임, 유저플로우, 링크 등</li>
</ul>
</li>
<li>labels<ul>
<li>스토리들을 그룹핑하는데 효과적임</li>
<li>ex: Epics, 빌드 넘버, 사용자…</li>
</ul>
</li>
</ul>
<h4 id="bug"><a href="#bug" class="headerlink" title="bug"></a>bug</h4><p>버그는 이미 수락된 feature의 결함<br>버그를 사용해서 새 기능을 자세히 설명하면 안됨(ex: 가격은 음수가 아니어야함, 로그인 버튼이 작동하지않음)<br>버그들은 이미 전달된 기능과 직접적으로 연관돼있으며 새로운 유저 가치를 제공하지 않으므로 포인트가 없음. 왜냐하면 추정하기가 불가능하고 해결하는데 30초가 걸릴수도 30일이 걸릴수도 있기때문</p>
<h5 id="bug에-포함되어야-하는-것들"><a href="#bug에-포함되어야-하는-것들" class="headerlink" title="bug에 포함되어야 하는 것들"></a>bug에 포함되어야 하는 것들</h5><ul>
<li>title : 짧고 설명가능해야함</li>
<li>description : 현재 무슨일이 일어나고 있는지, 무슨 일이 일어나야 하는가를 서술</li>
<li>instructions : 버그를 재현하는 단계를 요약하셈</li>
<li>resources : 스크린샷이나 버그를 설명하는데 도움을 주는 것들</li>
</ul>
<h4 id="chore"><a href="#chore" class="headerlink" title="chore"></a>chore</h4><p>chore는 필요하지만 사용자에게 직접적이고 분명한 가치를 제공하지는 않음 (ex: 테스트환경을 위해 새 도메인 및 와일드카드 SSL 인증서를 설치, 시스템 문제해결을 위한 툴 평가)<br>chore는 유저 가치에 직접적으로 기여하지 않으므로 측정할수 없음<br>chore가 유저가치를 제공하는것처럼 느껴지면 featrue stroy에 통합되어야함<br>예를들어 분석서비스를 사용하는 경우 서비스 설치에 관한 추가적인 복잡성은 chore로 분리되지 말고 feature story에 고려되어야함</p>
<h5 id="chore-스토리에-포함되어야-하는-것들"><a href="#chore-스토리에-포함되어야-하는-것들" class="headerlink" title="chore 스토리에 포함되어야 하는 것들"></a>chore 스토리에 포함되어야 하는 것들</h5><ul>
<li>title : 짧고 설명가능해야함</li>
<li>description : 왜 필요한지, 이것이 팀을 더 빠르게하거나 처리되지않으면 코드베이스에서 문제를 일으킬수 있는 의존성이 있는가를 서술</li>
<li>resources : 작업 수행을 돕는 지침, 추가 컨텍스트등</li>
</ul>
]]></content>
      
        
        <tags>
            
            <tag> PivotalTracker </tag>
            
            <tag> PivotalLabs </tag>
            
            <tag> 유저중심스토리 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Facebook Webhooks API로 lead ads와 CRM 통합]]></title>
      <url>/2018/07/30/facebook-webhook/</url>
      <content type="html"><![CDATA[<hr>
<p>이 페이지는 <a href="https://developers.facebook.com/docs/marketing-api/guides/lead-ads/quickstart/webhooks-integration" target="_blank" rel="external">이 문서</a>를 따라 테스트해보면서 추가적인 내용을 적어둔것이니 문서를 먼저 읽는것이 좋음!</p>
<h4 id="미리-설정해두면-좋은것들"><a href="#미리-설정해두면-좋은것들" class="headerlink" title="미리 설정해두면 좋은것들"></a>미리 설정해두면 좋은것들</h4><ul>
<li>App 설정</li>
<li>Page 설정 및 Lead Ad 설정</li>
<li>App, Page 관리자 권한 얻기</li>
</ul>
<hr>
<p><img src="/images/webhook.png" alt=""></p>
<p>테스트를 하면서 알았는데 페이스북 페이지에서 바로 webhook 설정을 할수 있는게 아니었다;<br>Lead ad는 페이스북 페이지에서, webhook은 페이스북 앱에서 각각 설정해줘야하고, 페이스북 페이지를 앱이 구독할수 있도록 승인이 필요하다.<br>즉 Lead ad의 실시간 업데이트가 앱으로 전달되고, 앱에 설정된 webhook을 통해 Lead ad로 받은 고객정보를 처리할수 있게된다.</p>
<p>문서를 보면 웹서버에 php 파일을 생성하라고 나와있는데, 대신 AWS Lambda와 API Gateway를 사용해서 테스트했다. 로컬서버로 테스트해보려다 잘안돼서 빠른 포기 -.-;;<br>API Gateway에서 메소드 생성시 GET, POST 둘다 생성해줘야한다. (아마 페이지 구독 설정시에는 GET, 실제 lead ad payload 전송시엔 POST 로 보내는듯)</p>
<p>각 메소드의 Integration Request에서 Use lambda proxy integration에 체크하면 Lambda 함수에 대한 입력을 요청 헤더, 경로 변수, 쿼리 문자열 파라미터 및 본문의 조합으로 표현할 수 있다.<br>해당 API로 들어오는 리퀘스트의 내용을 그대로 Lambda 함수로 전달하고 이것을 event로 쉽게 핸들링할수 있다.</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 구독설정시 lambda 함수 예제</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">lambda_handler</span><span class="params">(event, context)</span>:</span></div><div class="line">    challenge = event[<span class="string">'queryStringParameters'</span>][<span class="string">'hub.challenge'</span>]</div><div class="line">    verify_token = event[<span class="string">'queryStringParameters'</span>][<span class="string">'hub.verify_token'</span>]</div><div class="line"></div><div class="line">    <span class="comment"># if verify_token == 'test_token':</span></div><div class="line">    <span class="comment">#     print(challenge)</span></div><div class="line"></div><div class="line">    response = &#123;</div><div class="line">        <span class="string">"isBase64Encoded"</span>: <span class="keyword">False</span>,</div><div class="line">        <span class="string">"statusCode"</span>: <span class="number">200</span>,</div><div class="line">        <span class="string">"headers"</span>: &#123;&#125;,</div><div class="line">        <span class="string">"body"</span>: challenge</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> response</div></pre></td></tr></table></figure>
<p>대신 response 형식도 아래와 같이 맞춰줘야한다.<br><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">    <span class="attr">"isBase64Encoded"</span>: <span class="literal">true</span>|<span class="literal">false</span>,</div><div class="line">    <span class="attr">"statusCode"</span>: httpStatusCode,</div><div class="line">    "headers": &#123; "headerName": "headerValue", ... &#125;,</div><div class="line">    "body": "..."</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>모든 설정을 완료한 후에 <a href="https://developers.facebook.com/tools/lead-ads-testing" target="_blank" rel="external">https://developers.facebook.com/tools/lead-ads-testing</a> 에서 테스트를 해보면 제대로 동작해보는지 확인할수 있다.<br>앱 관리 페이지에서 webhook - leadgen Test 에서도 테스트 가능하다.</p>
<p>body에 유저가 입력한 form data가 같이 넘어오는줄 알았는데 그게 아니었음… 실시간 업데이트에 대한 데이터가 아래처럼 넘어온다. ㅠㅠ<br><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line">array(</div><div class="line">  "object" =&gt; "page",</div><div class="line">  "entry" =&gt; array(</div><div class="line">    "0" =&gt; array(</div><div class="line">      "id" =&gt; 153125381133,</div><div class="line">      "time" =&gt; 1438292065,</div><div class="line">      "changes" =&gt; array(</div><div class="line">        "0" =&gt; array(</div><div class="line">          "field" =&gt; "leadgen",</div><div class="line">          "value" =&gt; array(</div><div class="line">            "leadgen_id" =&gt; 123123123123,</div><div class="line">            "page_id" =&gt; 123123123,</div><div class="line">            "form_id" =&gt; 12312312312,</div><div class="line">            "adgroup_id" =&gt; 12312312312,</div><div class="line">            "ad_id" =&gt; 12312312312,</div><div class="line">            "created_time" =&gt; 1440120384</div><div class="line">          )</div><div class="line">        ),</div><div class="line">        "1" =&gt; array(</div><div class="line">          "field" =&gt; "leadgen",</div><div class="line">          "value" =&gt; array(</div><div class="line">            "leadgen_id" =&gt; 123123123124,</div><div class="line">            "page_id" =&gt; 123123123,</div><div class="line">            "form_id" =&gt; 12312312312,</div><div class="line">            "adgroup_id" =&gt; 12312312312,</div><div class="line">            "ad_id" =&gt; 12312312312,</div><div class="line">            "created_time" =&gt; 1440120384</div><div class="line">          )</div><div class="line">        )</div><div class="line">      )</div><div class="line">    )</div><div class="line">  )</div><div class="line">)</div></pre></td></tr></table></figure></p>
<p>그래서 넘어온 id를 가지고 Facebook Ads API를 이용해서 데이터를 받아와야한다 ㅠㅠ 페이스북놈들…<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># Python Business SDK</span></div><div class="line"><span class="keyword">from</span> facebookads.adobjects.lead <span class="keyword">import</span> Lead</div><div class="line"><span class="keyword">from</span> facebookads.api <span class="keyword">import</span> FacebookAdsApi</div><div class="line"></div><div class="line">access_token = <span class="string">'&lt;ACCESS_TOKEN&gt;'</span></div><div class="line">app_secret = <span class="string">'&lt;APP_SECRET&gt;'</span></div><div class="line">app_id = <span class="string">'&lt;APP_ID&gt;'</span></div><div class="line">id = <span class="string">'&lt;ID&gt;'</span></div><div class="line">FacebookAdsApi.init(access_token=access_token)</div><div class="line"></div><div class="line">fields = [</div><div class="line">]</div><div class="line">params = &#123;</div><div class="line">&#125;</div><div class="line"><span class="keyword">print</span> Lead(id).get(</div><div class="line">  fields=fields,</div><div class="line">  params=params,</div><div class="line">)</div></pre></td></tr></table></figure></p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"># response</div><div class="line">&#123;</div><div class="line">  <span class="attr">"created_time"</span>: <span class="string">"2015-02-28T08:49:14+0000"</span>,</div><div class="line">  <span class="attr">"id"</span>: <span class="string">"&lt;LEAD_ID&gt;"</span>,</div><div class="line">  <span class="attr">"ad_id"</span>: <span class="string">"&lt;AD_ID&gt;"</span>,</div><div class="line">  <span class="attr">"form_id"</span>: <span class="string">"&lt;FORM_ID&gt;"</span>,</div><div class="line">  <span class="attr">"field_data"</span>: [&#123;</div><div class="line">    <span class="attr">"name"</span>: <span class="string">"car_make"</span>,</div><div class="line">    <span class="attr">"values"</span>: [</div><div class="line">      <span class="string">"Honda"</span></div><div class="line">    ]</div><div class="line">  &#125;,</div><div class="line">  &#123;</div><div class="line">    <span class="attr">"name"</span>: <span class="string">"full_name"</span>,</div><div class="line">    <span class="attr">"values"</span>: [</div><div class="line">      <span class="string">"Joe Example"</span></div><div class="line">    ]</div><div class="line">  &#125;,</div><div class="line">  &#123;</div><div class="line">    <span class="attr">"name"</span>: <span class="string">"email"</span>,</div><div class="line">    <span class="attr">"values"</span>: [</div><div class="line">      <span class="string">"joe@example.com"</span></div><div class="line">    ]</div><div class="line">  &#125;,</div><div class="line">  &#123;</div><div class="line">    <span class="attr">"name"</span>: <span class="string">"selected_dealer"</span>,</div><div class="line">    <span class="attr">"values"</span>: [</div><div class="line">      <span class="string">"99213450"</span></div><div class="line">    ]</div><div class="line">  &#125;],</div><div class="line">  ...</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
      
        
        <tags>
            
            <tag> Lambda </tag>
            
            <tag> AWS </tag>
            
            <tag> Facebook </tag>
            
            <tag> LeadAds </tag>
            
            <tag> APIGateway </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[DynamoDB Stream]]></title>
      <url>/2018/06/24/dynamostream/</url>
      <content type="html"><![CDATA[<hr>
<p>DynamoDB 스트림은 DynamoDB 테이블 항목의 변경 정보에 대한 흐름을 나타내준다.<br>스트림 이벤트는 INSERT, MODIFY, DELETE 세가지로 나눠진다.</p>
<p><img src="/images/manage_stream.png" alt="Manage Stream"><br>DDB 테이블의 overview 탭에 보면 Stream Detail 항목이 있는데 여기서 뷰 타입을 설정 가능하다.<br>이벤트가 발생한 아이템의 키만 보여주던지, 새 이미지만 보여주던지, 기존 이미지만 보여주던지, 둘다 보여주던지 총 네가지 타입이 있다.<br>물론 스트림을 비활성화하는것도 가능하다.</p>
<p><img src="/images/add_trigger.png" alt="Trigger 추가"><br>Trigger 탭에서 스트림에 대한 Lambda 트리거를 쉽게 추가할 수 있다.<br>새 Lambda function을 추가할수도 있고, 존재하는 function을 추가할 수도 있다.<br>function을 추가하면서 batch size도 설정 가능한데 나중에 설정해둔 사이즈를 확인할 수 있는 곳을 못찾아서 한참 헤맸다;<br>해당 Lambda function에 들어가서 Designer 항목에서 DynamoDB를 선택하면 아래에 정보를 띄워준다.<br>이걸 몇달 후에나 알았음 -.-</p>
<p>수백만건의 데이터를 DynamoDB에 때려넣다가 에러는 안나는데 결과 데이터의 오차율이 너무 커서 꽤 오래 고생을 했는데 원인은 단순했다.<br>DynamoDB Stream은 최대 24시간동안만 저장한다는 사실…<br>트리거 function이 단순한 로직이 아니라면 스트림이 쌓여있다가 트리거가 돌기전에 휘발될수 있으니 주의하자 ㅠㅠ </p>
]]></content>
      
        
        <tags>
            
            <tag> AWS </tag>
            
            <tag> DynamoDB </tag>
            
            <tag> Stream </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Lambda, Kinesis Firehose 를 이용해서 AuroraDB에 추가된 데이터를 실시간으로 ES에 저장하기]]></title>
      <url>/2018/02/15/aurora-to-es/</url>
      <content type="html"><![CDATA[<hr>
<p>이번엔 Kinesis Firehose 의 목적지를 Elasticsearch로 설정해서 테스트해봤다. Elasticsearch 새 도메인 올리는데 시간이 좀 걸리니 미리 만들어 두는게 좋음.</p>
<ol>
<li><a href="http://tuwhit.github.io/2018/01/23/aurora-data-streaming/">Lambda, Kinesis Firehose 를 이용해서 AuroraDB에 추가된 데이터 실시간으로 캡쳐하기</a> 문서 참고해서 AuroraDB, Lambda 설정까지 완료</li>
<li>새 Elasticsearch domain을 생성<ul>
<li>kinesis firehose가 elasticsearch 6.0은 지원을 안하니 그 아래 버전으로 생성할것. Elasticsearch 6.0 is not currently supported by Kinesis Firehose. Contact AWS Support for more information. 에러가 뜬다… 따흐흑…</li>
</ul>
</li>
<li><p>위 domain에 index, type을 생성</p>
<figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">    <span class="attr">"properties"</span>: &#123;</div><div class="line">        <span class="attr">"ItemID"</span>: &#123;<span class="attr">"type"</span>: <span class="string">"integer"</span>&#125;,</div><div class="line">        <span class="attr">"Category"</span>: &#123;<span class="attr">"type"</span>: <span class="string">"text"</span>&#125;,</div><div class="line">        <span class="attr">"Price"</span>: &#123;<span class="attr">"type"</span>: <span class="string">"float"</span>&#125;,</div><div class="line">        <span class="attr">"Quantity"</span>: &#123;<span class="attr">"type"</span>: <span class="string">"integer"</span>&#125;,</div><div class="line">        <span class="attr">"OrderDate"</span>:  &#123;</div><div class="line">          <span class="attr">"type"</span>: <span class="string">"date"</span>,</div><div class="line">          <span class="attr">"format"</span>: <span class="string">"strict_date_optional_time||epoch_millis"</span></div><div class="line">        &#125;,</div><div class="line">        <span class="attr">"DestinationState"</span>: &#123;<span class="attr">"type"</span>: <span class="string">"text"</span> &#125;,</div><div class="line">        <span class="attr">"ShippingType"</span>: &#123;<span class="attr">"type"</span>: <span class="string">"text"</span>&#125;,</div><div class="line">        <span class="attr">"Referral"</span>: &#123;<span class="attr">"type"</span>: <span class="string">"text"</span>&#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>새 Kinesis Firehose 를 생성</p>
<ul>
<li>destination을 Amazon Elasticsearch service 선택</li>
<li>Amazon Elasticsearch Service destination에 위에서 만든 elasticsearch domain, index, type을 입력</li>
<li>IAM에 ES에 대한 권한이 제대로 명시돼 있는지 확인 (알아서 만들어줌)</li>
</ul>
</li>
<li><p>Lambda code 수정</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> boto3</div><div class="line"><span class="keyword">import</span> json</div><div class="line"><span class="keyword">import</span> logging</div><div class="line"></div><div class="line">firehose = boto3.client(<span class="string">'firehose'</span>, region_name=<span class="string">'리전이름'</span>)</div><div class="line">stream_name = <span class="string">'delivery stream 이름'</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">lambda_handler</span><span class="params">(event, context)</span>:</span></div><div class="line">    <span class="comment"># for ES</span></div><div class="line">    firehose_data = &#123;</div><div class="line">        <span class="string">"ItemID"</span>: event[<span class="string">'ItemID'</span>],</div><div class="line">        <span class="string">"Category"</span>: event[<span class="string">'Category'</span>],</div><div class="line">        <span class="string">"Price"</span>: event[<span class="string">'Price'</span>],</div><div class="line">        <span class="string">"Quantity"</span>: event[<span class="string">'Quantity'</span>],</div><div class="line">        <span class="string">"OrderDate"</span>: event[<span class="string">'OrderDate'</span>].split()[<span class="number">0</span>] + <span class="string">"T"</span> + event[<span class="string">'OrderDate'</span>].split()[<span class="number">1</span>],</div><div class="line">        <span class="string">"DestinationState"</span>: event[<span class="string">'DestinationState'</span>],</div><div class="line">        <span class="string">"ShippingType"</span>: event[<span class="string">'ShippingType'</span>],</div><div class="line">        <span class="string">"Referral"</span>: event[<span class="string">'Referral'</span>]</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    firehose_data = &#123;<span class="string">'Data'</span>: json.dumps(firehose_data)&#125;</div><div class="line">    logging.info(json.dumps(firehose_data))</div><div class="line"></div><div class="line">    result = firehose.put_record(DeliveryStreamName=stream_name,Record=firehose_data)</div></pre></td></tr></table></figure>
</li>
<li><p>AuroraDB 테이블에 데이터 추가</p>
</li>
<li>얼마후에 ES에 _search 쿼리 날려보면 데이터가 추가된것을 확인할수 있음</li>
</ol>
<hr>
<ul>
<li>기타 참고<ul>
<li>kinesis 에서 데이터가 잘 넘어가는지 CloudWatch에서 확인<br>실패시 S3에 로그저장됨</li>
<li>Datetime 포맷은 ES의 Date 포맷에 맞춰서 넣을것</li>
</ul>
</li>
</ul>
]]></content>
      
        
        <tags>
            
            <tag> Lambda </tag>
            
            <tag> AWS </tag>
            
            <tag> AuroraDB </tag>
            
            <tag> KinesisFirehose </tag>
            
            <tag> Elasticsearch </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Lambda, Kinesis Firehose 를 이용해서 AuroraDB에 추가된 데이터 실시간으로 캡쳐하기]]></title>
      <url>/2018/01/23/aurora-data-streaming/</url>
      <content type="html"><![CDATA[<hr>
<p><img src="/images/Workflow.jpg" alt="Workflow"></p>
<p>데이터 스트리밍 관련 리서치를 하다가 <a href="https://aws.amazon.com/ko/blogs/database/capturing-data-changes-in-amazon-aurora-using-aws-lambda/" target="_blank" rel="external">이런</a> 문서가 있길래 직접 해봤다.(AuroraStream이 따로 없고 DynamoStream만 있는듯) 회사에선 AuroraDB를 써서 일단 요 실습을 따라해보는걸로.</p>
<p>사실 자세한건 위 링크에 다 나와있다…ㅎㅎ;; 간단히 요약하면서 중간중간 삽질한것만 추가로 기록해봤음.</p>
<ol>
<li>Kinesis 에서새로운 delivery stream을 생성하고 Destination을 S3로 선택해준뒤, 원하는 버켓을 지정해줌</li>
<li>AuroraDB 와 같은 리전에서 새 Lambda function 을 생성<ul>
<li>Lambda 코드에서 stream_name 만 1번에서 만든 stream 이름으로 변경</li>
<li>혹시 firehose 가 다른 리전에 있다면 firehose = boto3.client(‘firehose’, region_name=’리전 이름’) 이렇게 뒤에 리전 이름 추가해줌</li>
</ul>
</li>
<li>AuroraDB에서 원하는 테이블에 프로시저, 트리거 생성<ul>
<li>프로시저에서 2에서 생성해준 Lambda function의 arn 으로 설정해줌</li>
</ul>
</li>
<li>AuroraDB parameter group에서 aws_default_lambda_role 의 value 를 lambda 를 실행시킬수있는 role의 arn으로 설정<ul>
<li>안해주면 Missing Credentials: Cannot instrantiate Lambda Client 에러남</li>
</ul>
</li>
<li>테이블에 데이터를 추가<ul>
<li>Lambda에서 예외처리를 따로 안해줘서 필드가 null 일땐 에러나는듯</li>
</ul>
</li>
<li>좀있다가 S3 버킷 확인해보면 요렇게 파일이 생겨있음<br><img src="/images/AuroraToS3.png" alt="S3에 생긴 파일을 확인해보면!"></li>
<li>그래도 에러나면 IAM 제대로 설정돼있는지 확인 ㄱㄱ</li>
</ol>
]]></content>
      
        
        <tags>
            
            <tag> Lambda </tag>
            
            <tag> AWS </tag>
            
            <tag> S3 </tag>
            
            <tag> AuroraDB </tag>
            
            <tag> KinesisFirehose </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Data Pipeline로 S3에서 DynamoDB로 데이터 import 시키기]]></title>
      <url>/2017/11/19/import-to-dynamodb/</url>
      <content type="html"><![CDATA[<hr>
<p>이번엔 Data Pipeline을 이용해서 S3에서 DynamoDB로 데이터를 import 시키는 방법을 정리해본다.</p>
<p>DynamoDB에 item을 생성하는데(이틀간 삽질하며) 아래의 방식들을 써봤다.</p>
<ol>
<li>AWS console에서 직접 생성</li>
<li>ruby SDK를 이용해서 csv 파일을 한줄한줄 읽어서 item 생성</li>
<li>aws dynamodb batch-write-item –request-items file://파일명 명령어를 이용(형식 맞춰줘야함)</li>
<li>DataPipeline을 이용해서 S3의 파일을 import</li>
</ol>
<p>1억건의 데이터를 넣는데는 1, 2번으론 무리가 있었고 3번도 파일 용량제한이 있는지 에러를 내뱉었다. 결국 Data Pipeline으로…</p>
<p>Data Pipeline 을 생성하면 DynamoDB 템플릿이 존재한다. <strong>Import DynamoDB backup data from S3</strong> 을 선택하고 생성해준다. 그리고 Parameter 들만 잘 설정해주면 됨. 유의해야할것은 Data Pipeline을 생성한 리전과 S3 bucket, DynamoDB의 리전이 같아야한다. 안그러면 에러를 뿜뿜함.</p>
<p><img src="/images/datapipeline_setting.png" alt="parameter 설정"></p>
<center style="color: grey; font-size: 14px;">아니 리전 입력하라고 해놓고 왜 에러나는지 모를…</center>


<p>파일형식도 맞춰야한다. 열심히 구글링을 해봐도 없어서 새로 Data Pipeline을 생성해서 반대로 Export 시켜봤다 ㅠㅠ</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&#123;<span class="string">"amount"</span>:&#123;<span class="string">"s"</span>:<span class="string">"8"</span>&#125;,<span class="string">"shop_id"</span>:&#123;<span class="string">"s"</span>:<span class="string">"100000"</span>&#125;,<span class="string">"gender"</span>:&#123;<span class="string">"s"</span>:<span class="string">"1"</span>&#125;,<span class="string">"Id"</span>:&#123;<span class="string">"n"</span>:<span class="string">"1"</span>&#125;,<span class="string">"user_id"</span>:&#123;<span class="string">"s"</span>:<span class="string">"70167727"</span>&#125;,<span class="string">"date"</span>:&#123;<span class="string">"s"</span>:<span class="string">"2017-01-22"</span>&#125;,<span class="string">"birth_year"</span>:&#123;<span class="string">"s"</span>:<span class="string">"1955"</span>&#125;&#125;</div><div class="line">&#123;<span class="string">"amount"</span>:&#123;<span class="string">"s"</span>:<span class="string">"17"</span>&#125;,<span class="string">"shop_id"</span>:&#123;<span class="string">"s"</span>:<span class="string">"100001"</span>&#125;,<span class="string">"gender"</span>:&#123;<span class="string">"s"</span>:<span class="string">"0"</span>&#125;,<span class="string">"Id"</span>:&#123;<span class="string">"n"</span>:<span class="string">"2"</span>&#125;,<span class="string">"user_id"</span>:&#123;<span class="string">"s"</span>:<span class="string">"29015489"</span>&#125;,<span class="string">"date"</span>:&#123;<span class="string">"s"</span>:<span class="string">"2017-07-05"</span>&#125;,<span class="string">"birth_year"</span>:&#123;<span class="string">"s"</span>:<span class="string">"2010"</span>&#125;&#125;</div><div class="line">&#123;<span class="string">"amount"</span>:&#123;<span class="string">"s"</span>:<span class="string">"11"</span>&#125;,<span class="string">"shop_id"</span>:&#123;<span class="string">"s"</span>:<span class="string">"100001"</span>&#125;,<span class="string">"gender"</span>:&#123;<span class="string">"s"</span>:<span class="string">"1"</span>&#125;,<span class="string">"Id"</span>:&#123;<span class="string">"n"</span>:<span class="string">"4"</span>&#125;,<span class="string">"user_id"</span>:&#123;<span class="string">"s"</span>:<span class="string">"90567446"</span>&#125;,<span class="string">"date"</span>:&#123;<span class="string">"s"</span>:<span class="string">"2017-01-14"</span>&#125;,<span class="string">"birth_year"</span>:&#123;<span class="string">"s"</span>:<span class="string">"1953"</span>&#125;&#125;</div></pre></td></tr></table></figure>
<p> 그 결과, item별로 {필드1: {데이터 형식: 값}, 필드2: {데이터 형식: 값}} 요런 형태로 파일이 만들어졌다. 그래서 기존의 csv 파일을 위 형태로 컨버팅후(스크립트 만들어서 돌림ㅠㅠ) Data Pipeline을 실행시켜보니 잘 들어감!</p>
<p>그런데 write 속도가 너무 느려서 DynamoDB의 write capacity 값을 올려줬는데도 일정값 이상으로 안올라오길래 왜그런가 했더니 Data Pipeline 설정에 myDDBWriteThroughputRatio 필드가 있었다.(0 ~ 1 사이의 값으로 입력가능) 1으로 수정해주니 입력값으로 잘 올라옴.</p>
<p>다른건 몰라도 이제 DynamoDB에 데이터 입력하는덴 전문가된듯. -_-</p>
]]></content>
      
        
        <tags>
            
            <tag> AWS </tag>
            
            <tag> DynamoDB </tag>
            
            <tag> DataPipeline </tag>
            
            <tag> S3 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[S3에 있는 csv 파일을 AuroraDB로 import 시키기]]></title>
      <url>/2017/11/16/import-s3-to-aurora/</url>
      <content type="html"><![CDATA[<hr>
<p>데이터 분석 관련 프로젝트를 진행중이라 간만에 포스팅을 한다. 아마 당분간 프로젝트를 진행하며 겪었던 삽질기를 계속 포스팅하지 않을까 싶음… 처음 해보는것들 투성이라 팀원들이 모두 프로야근러가 되었다. 흑흑ㅠㅠ 오늘은 문서가 잘 정리돼있어서 꽤 쉽게 클리어했던 S3에 있는 csv 파일을 AuroraDB에 import 시키는 방법을 정리해본다.</p>
<p>AuroraDB instance를 생성하고 IAM role(case는 물론 RDS로 선택)을 만들어준다. 생성후 permission 탭에서 Attach policy를 클릭하여 S3에 Access할수 있도록 <strong>AmazonS3FullAccess</strong> 를 추가해준다.</p>
<p>그리고 다시 RDS로 돌아가 Parameter group을 생성해준다. 여기서 Type은  <strong>DB Cluster Parameter Group</strong> 으로 설정한다. 생성후에 <strong>aurora_load_from_s3_role</strong> 의 value 값을 위에서 만든 IAM role ARN로 입력해준다.</p>
<p>cluster 메뉴에서 해당 cluster 수정 페이지로 이동하여 DB Cluster Parameter Group을 위에서 생성해준 걸로 설정해준다. 다음 페이지로 넘어가서 Apply Immediately 선택후 완료. 다시 cluster 메뉴로 돌아와 해당 cluster 선택 후 Manage IAM roles 페이지로 이동하여 위에서 만들어준 IAM role을 추가해준다.</p>
<p>여기까지가 데이터를 로드하기위한 준비 끝.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mysql -h [DB Endpoint] -P [port] -u [user name] -p</div></pre></td></tr></table></figure>
<p>이후 패스워드를 입력하면 해당 AuroraDB로 접속하게된다.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">load data from s3 &apos;s3-[region]://[bucket name]/[file name]&apos;</div><div class="line">into table [table name]</div><div class="line">fields terminated by &apos;,&apos;;</div></pre></td></tr></table></figure>
<p>이렇게 하면 s3에 있는 csv 파일의 데이터를 지정한 테이블로 로드하게 된다. 1억 row 짜리 데이터 올리는데 한시간가량 걸렸던것 같음.</p>
<p>위 명령어만으로 로드하면 필드명으로 구분이 안되고 파일에 입력된 순서대로 DB에 저장되니 유의하자. 로드할때 여러가지 옵션이 있는데 <a href="http://docs.aws.amazon.com/ko_kr/AmazonRDS/latest/UserGuide/Aurora.LoadFromS3.html" target="_blank" rel="external">여기</a>에서 확인할 수 있다.</p>
]]></content>
      
        
        <tags>
            
            <tag> AWS </tag>
            
            <tag> S3 </tag>
            
            <tag> AuroraDB </tag>
            
            <tag> Database </tag>
            
            <tag> RDS </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[AWS 도커 컨테이너 배포 자동화 실습]]></title>
      <url>/2017/10/27/code-deploy/</url>
      <content type="html"><![CDATA[<hr>
<p>3일전 Gaming on AWS에 참석해서 ‘도커 컨테이너 배포 자동화 실습’을 진행했다. 회사에서도 도커 컨테이너를 이용해서 배포를 하고있어서(수동이지만) 적용해볼 수 있을것 같다.</p>
<p>당일에는 실습자료를 보고 따라하기 급급했어서 다시 한번 정리해봤다.</p>
<p><img src="/images/architecture.png" alt="실습 아키텍쳐"></p>
<blockquote>
<p>CodePipeline으로 배포 프로세스를 구성하고 S3에 저장된 소스코드를 CodeBuild를 통해 컴파일 및 컨테이너 이미지 생성한다. 그리고 CloudFormation을 이용해 ECS에 배포한다.</p>
</blockquote>
<ol>
<li>CodePipeline 생성</li>
<li>Source provider는 소스코드가 저장된 S3 버킷으로 설정하고 CodeBuild를 build provider로 선택</li>
<li>코드가 build되어 생성된 컨테이너 이미지는 ECR repository에 저장</li>
<li>환경 설정 파일도 S3에 저장하고 CodePipeline 에서 해당 파일을 사용하는 Source 액션 추가</li>
<li>Dockerize 하는 액션 추가 (여기까지가 Build 스테이지)</li>
<li>Deploy 스테이지 추가</li>
<li>CloudFormation으로 환경설정 파일을 참조하여 deploy</li>
</ol>
<p>설정 완료 후 S3에 환경 설정 파일, 어플리케이션을 업로드하면 CodePipeline 에서 변경사항을 감지하여 배포작업을 수행한다. 왕신기. 추가적으로 Lambda를 이용해서 Blue/Green 배포도 가능하다. 현재 리얼 환경이 아닌 곳으로 배포하고 수동 승인과정을 거치면 환경을 Swap 하도록 할 수 있다.</p>
<p><img src="/images/code_pipeline_setting.png" alt="code pipeline 설정"></p>
<center style="color: grey; font-size: 14px;">이거슨 빙산의 일각이다</center>

<p>간단히 정리해놔서 그렇지 실제로 콘솔에서 설정해줘야 하는 것들이 굉장히 많았다. (ECS, ELB, ECR, IAM 등등…) 그 하나하나를 이해하기는 좀 어려워서 따로 공부가 필요할 것 같다. 그리고 실습에서 제공된 환경설정파일들도 실제 서비스 환경설정파일들이랑 같이 보면 좋을듯.</p>
]]></content>
      
        
        <tags>
            
            <tag> deploy </tag>
            
            <tag> AWS </tag>
            
            <tag> CodePipeline </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[개복치같은 서버를 살리기위한 삽질기(ing)]]></title>
      <url>/2017/10/13/server-sabjil/</url>
      <content type="html"><![CDATA[<hr>
<p>작년에 신규 프로젝트를 진행하면서 기존 ruby 서버가 아닌 python 으로 별도의 서버를 띄웠다. Java로 된 별도의 암호화모듈을 사용해야해서 Py4J을 이용했다. 그런데 이 라이브러리의 문제인지 메모리 누수 때문인지 원인은 모르겠지만 2-3주정도 주기로 암호화모듈쪽에서 에러가 나기 시작하면서 그 이후의 모든 요청에서 같은 에러가 발생했다. 기존에 url lib 를 썼던것을 requests 를 사용하도록 수정했지만 에러 발생주기가 조금 길어졌을 뿐 해결이 되지않았다. 일단 원인을 찾는것은 뒤로 미루고 Lambda와 Cloud Watch를 이용해서 매일 새벽2시에 인스턴스를 리붓시키도록 했다.</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> AWS = <span class="built_in">require</span>(<span class="string">'aws-sdk'</span>);</div><div class="line"></div><div class="line">exports.handler = <span class="function">(<span class="params">event, context, callback</span>) =&gt;</span> &#123;</div><div class="line">    <span class="keyword">var</span> ec2 = <span class="keyword">new</span> AWS.EC2(&#123;<span class="attr">region</span>: <span class="string">'ap-northeast-2'</span>&#125;);</div><div class="line">    </div><div class="line">    ec2.rebootInstances(&#123;<span class="attr">InstanceIds</span> : [<span class="string">'instance-ID'</span>] &#125;,<span class="function"><span class="keyword">function</span> (<span class="params">err, data</span>) </span>&#123;</div><div class="line">        <span class="keyword">if</span> (err) <span class="built_in">console</span>.log(err.stack);</div><div class="line">        <span class="keyword">else</span> <span class="built_in">console</span>.log(data);</div><div class="line">        context.done(err,data);</div><div class="line">    &#125;);</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>이후 몇달간 서버에 이상이 없는듯 하더니 어느날 아예 500에러가 나기시작했다. -_- 원인을 찾아보려 서버에 접속해봤더니 컨테이너가 아예 없었다. 리붓하면서 컨테이너가 제대로 생성되지 않은것 같았다. Docker 관련 지식이 얕아 원인을 알수가 없어서 일단 인스턴스를 새로 생성하는 것으로 해결을 했다. 그리고 UptimeRobot을 이용해 5분에 한번 서버에 request를 보내고, 문제가 있으면 slack으로 alert message를 남기도록 했다.</p>
<p><img src="/images/KakaoTalk_2017-10-13-20-16-05_Photo_18.png" alt="UptimeRobot"></p>
<center style="color: grey; font-size: 14px;">이걸 5분만에 설정할수있다니 21세기 스고이</center>



<p>그런데 깜빡하고 Lambda 코드에 바뀐 인스턴스 ID로 수정하지 않아서(아오) 3주뒤 또 암호화 모듈 에러가 발생했다. 이런 휴먼에러를 발생시키지 않기위해 코드를 몇줄 더 추가했다. ㅠㅠ<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> AWS = <span class="built_in">require</span>(<span class="string">'aws-sdk'</span>);</div><div class="line"><span class="keyword">var</span> https = <span class="built_in">require</span>(<span class="string">'https'</span>);</div><div class="line"><span class="keyword">var</span> util = <span class="built_in">require</span>(<span class="string">'util'</span>);</div><div class="line"></div><div class="line"><span class="keyword">var</span> POST_OPTIONS = &#123;</div><div class="line">    hostname: <span class="string">'hooks.slack.com'</span>,</div><div class="line">    path: <span class="string">'slack web-hook url'</span>,</div><div class="line">    method: <span class="string">'POST'</span>,</div><div class="line">&#125;;</div><div class="line"></div><div class="line">exports.handler = <span class="function">(<span class="params">event, context, callback</span>) =&gt;</span> &#123;</div><div class="line">    <span class="keyword">var</span> ec2 = <span class="keyword">new</span> AWS.EC2(&#123;<span class="attr">region</span>: <span class="string">'ap-northeast-2'</span>&#125;);</div><div class="line">    <span class="keyword">const</span> failed_message = &#123;</div><div class="line">        channel: <span class="string">'service-alerts'</span>,</div><div class="line">        text: <span class="string">'Instace Reboot Failed'</span></div><div class="line">    &#125;;</div><div class="line">    </div><div class="line">    <span class="comment">// check if instance exists</span></div><div class="line">    ec2.describeInstances(&#123;<span class="attr">InstanceIds</span> : [<span class="string">'instance-ID'</span>]&#125;, <span class="function"><span class="keyword">function</span> (<span class="params">err, data</span>)</span>&#123;</div><div class="line">        <span class="keyword">if</span> (err) &#123;  <span class="comment">// if doesn't exist, send slack alert</span></div><div class="line">            <span class="keyword">var</span> r = https.request(POST_OPTIONS, <span class="function"><span class="keyword">function</span>(<span class="params">res</span>) </span>&#123;</div><div class="line">                        res.setEncoding(<span class="string">'utf8'</span>);</div><div class="line">                        res.on(<span class="string">'data'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</div><div class="line">                            context.succeed(<span class="string">"Message Sent: "</span> + data);</div><div class="line">                     &#125;);</div><div class="line">            &#125;).on(<span class="string">"error"</span>, <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;context.fail(<span class="string">"Failed: "</span> + e);&#125; );</div><div class="line">            r.write(util.format(<span class="string">"%j"</span>, failed_message));</div><div class="line">            r.end();</div><div class="line">        &#125; <span class="keyword">else</span> &#123;    <span class="comment">// exist</span></div><div class="line">            <span class="comment">// reboot instance</span></div><div class="line">            ec2.rebootInstances(&#123;<span class="attr">InstanceIds</span> : [<span class="string">'instance-ID'</span>] &#125;,<span class="function"><span class="keyword">function</span> (<span class="params">err, data</span>) </span>&#123;</div><div class="line">            <span class="keyword">if</span> (err) &#123;  <span class="comment">// send slack alert</span></div><div class="line">                <span class="keyword">var</span> r = https.request(POST_OPTIONS, <span class="function"><span class="keyword">function</span>(<span class="params">res</span>) </span>&#123;</div><div class="line">                            res.setEncoding(<span class="string">'utf8'</span>);</div><div class="line">                            res.on(<span class="string">'data'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</div><div class="line">                                context.succeed(<span class="string">"Message Sent: "</span> + data);</div><div class="line">                         &#125;);</div><div class="line">                &#125;).on(<span class="string">"error"</span>, <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;context.fail(<span class="string">"Failed: "</span> + e);&#125; );</div><div class="line">                r.write(util.format(<span class="string">"%j"</span>, failed_message));</div><div class="line">                r.end();</div><div class="line">            &#125; <span class="keyword">else</span> <span class="built_in">console</span>.log(data);</div><div class="line">                context.done(err,data);</div><div class="line">            &#125;);</div><div class="line">        &#125;</div><div class="line">    &#125;);</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<p>리붓시킬 인스턴스를 먼저 찾고 없으면 슬랙으로 alert message를 보내고, 있으면 해당 인스턴스를 리붓시킨다. 리붓시 에러가 나도 슬랙으로 alert message를 보낸다.</p>
<p>애초에 에러의 원인을 찾아서 해결했어야하는데 다른일들로 시간적 여유가 없다보니 그때그때 서버만 살리고 뒷전으로 미뤄뒀던 것에 반성을… 틈틈히 시간내서 원인파악을 해야겠다.</p>
]]></content>
      
        
        <tags>
            
            <tag> Server </tag>
            
            <tag> Lambda </tag>
            
            <tag> node.js </tag>
            
            <tag> UptimeRobot </tag>
            
            <tag> Monitoring </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[UI와 UX에 대한 개념 정리]]></title>
      <url>/2017/09/26/til/</url>
      <content type="html"><![CDATA[<hr>
<p>프로젝트 진행중에 UX 설계를 해볼일이 생겼는데, 디알못이라 뭘 어떻게 해야할지 영 감이 잘 안잡혀서 일단 UI, UX의 개념이라도 정리해봤다.(정리하다보니 생각났는데 옛날에 Human Centered Design 스터디를 한적이 있는데, 그것도 UX Design에 속하는 거였나 싶음)</p>
<h3 id="UI-User-Interface"><a href="#UI-User-Interface" class="headerlink" title="UI(User Interface)"></a>UI(User Interface)</h3><ul>
<li>일련의 화면, 페이지 및 장치와 상호작용할 때 사용하는 시각적 요소</li>
</ul>
<h3 id="UX-User-Experience"><a href="#UX-User-Experience" class="headerlink" title="UX(User Experience)"></a>UX(User Experience)</h3><ul>
<li>회사, 서비스 및 제품과 상호 작용하는 사용자의 경험</li>
<li>UX Design<ul>
<li>실제 필드에서 사용자를 관찰하고, 그 결과를 바탕으로 디자인</li>
<li>누가, 왜, 무엇을, 어떻게 사용하는지를 고려해야함</li>
<li>어떤 목적인지, 어떤 의도가 있는지, 어떻게 쓰였으면 좋겠는지에 대해 고민 필요</li>
</ul>
</li>
</ul>
<h3 id="UI와-UX의-차이점-에-대한-전문가들의-생각"><a href="#UI와-UX의-차이점-에-대한-전문가들의-생각" class="headerlink" title="UI와 UX의 차이점(에 대한 전문가들의 생각)"></a>UI와 UX의 차이점<del>(에 대한 전문가들의 생각)</del></h3><ul>
<li>UX는 문제를 해결하기위한 사용자의 여정에 포커스를 두고 UI는 제품 표면의 모습과 기능에 초점을 맞춘다. - Ken Norton</li>
<li>UX 디자이너는 디자인 프로세스의 개념적 측면에 관심을 가지기 때문에 UI 디자이너는 보다 확실한 요소에 집중할 수 있다. - Andy Budd</li>
<li>UX와 UI 디자인은 서로 비교할 수 없는 두가지이므로 차이가 없다. -Craig Morrision</li>
<li>UI는 일반적으로 화면 주변의 시각적 디자인 및 정보 디자인에 관한것이다. UX는 완벽한 경험에 관한 것이므로 화면과 관련이 없을 수 있다. - Patrick Neema</li>
<li>UI는 제품에 중점을 두고 있으며 일련의 스냅샷을 제시간에 제공한다. UX는 사용자 및 제품을 통한 이동에 초점을 맞춘다. - Scott Jenson</li>
<li>UX는 사용자가 제품을 사용하여 얻은 전반적인 경험이며 UI는 사용자가 실제로 상호 작용하고 볼수있는 것이다. - Clayton Yan</li>
</ul>
<p>API 로직을 고려하면서 UX 설계를 하려니 쉬운일이 아닌것같다. UX를 우선으로 하자니 로직 개선하기가 빡세고, 쉽게 가자니 UX가 좋지 않은것 같고… 엉엉</p>
]]></content>
      
        
        <tags>
            
            <tag> UI </tag>
            
            <tag> UX </tag>
            
            <tag> Design </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[블로그 개설]]></title>
      <url>/2017/09/24/first-post/</url>
      <content type="html"><![CDATA[<hr>
<p><a href="https://pages.github.com/" target="_blank" rel="external">Github Pages</a>, <a href="https://hexo.io/" target="_blank" rel="external">Hexo</a> 로 블로그 개설! <a href="https://jekyllrb-ko.github.io/" target="_blank" rel="external">Jekyll</a>을 이용해서 만들까 하다가 Ruby는 회사에서 많이 쓰니 Node.js 기반인 Hexo로 선택했다. 근데 뭐 Node.js 까막눈이어도 눈칫껏 만져보니 기존 테마에 살짝 커스텀하는 정도는 금방 하는듯. Markdown 문법도 잘 몰라서 <a href="https://gist.github.com/ihoneymon/652be052a0727ad59601" target="_blank" rel="external">Markdown 작성법</a> 보면서 이래저래 써보는 중인데 꽤 재밌다. 블로그 메뉴를 어떻게 나눌지, footer 엔 어떤 위젯을 넣을지, 로고는 뭘로 할지 고민. 10대때 열심히 네이버 블로그 꾸미던 시절 생각난다. 하악하악 재밌어!</p>
<p><a href="https://github.com/GallenHu/hexo-theme-Daily/wiki" target="_blank" rel="external">Daily 테마 위키</a>에 comment field 추가하려면 <code>_config.yml</code> 파일에<br><code>disqus_shortname: your-disqus-shortname</code> 만 추가해주면 된다고 했는데 코멘트 영역이 안뜸…^ㅅㅠ 다행히 <a href="https://disqus.com/" target="_blank" rel="external">disqus 홈페이지</a>에 들어가보니 site - installation 메뉴에 코드가 제공돼있었다.<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">&lt;div id=<span class="string">"disqus_thread"</span>&gt;&lt;/div&gt;</div><div class="line">&lt;script&gt;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment">*  RECOMMENDED CONFIGURATION VARIABLES: EDIT AND UNCOMMENT THE SECTION BELOW TO INSERT DYNAMIC VALUES FROM YOUR PLATFORM OR CMS.</span></div><div class="line"><span class="comment">*  LEARN WHY DEFINING THESE VARIABLES IS IMPORTANT: https://disqus.com/admin/universalcode/#configuration-variables*/</span></div><div class="line"><span class="comment">/*</span></div><div class="line"><span class="comment">var disqus_config = function () &#123;</span></div><div class="line"><span class="comment">this.page.url = PAGE_URL;  // Replace PAGE_URL with your page's canonical URL variable</span></div><div class="line"><span class="comment">this.page.identifier = PAGE_IDENTIFIER; // Replace PAGE_IDENTIFIER with your page's unique identifier variable</span></div><div class="line"><span class="comment">&#125;;</span></div><div class="line"><span class="comment">*/</span></div><div class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123; <span class="comment">// DON'T EDIT BELOW THIS LINE</span></div><div class="line"><span class="keyword">var</span> d = <span class="built_in">document</span>, s = d.createElement(<span class="string">'script'</span>);</div><div class="line">s.src = <span class="string">'https://tuwhit.disqus.com/embed.js'</span>;</div><div class="line">s.setAttribute(<span class="string">'data-timestamp'</span>, +<span class="keyword">new</span> <span class="built_in">Date</span>());</div><div class="line">(d.head || d.body).appendChild(s);</div><div class="line">&#125;)();</div><div class="line">&lt;<span class="regexp">/script&gt;</span></div><div class="line"><span class="regexp">&lt;noscript&gt;Please enable JavaScript to view the &lt;a href="https:/</span><span class="regexp">/disqus.com/</span>?ref_noscript<span class="string">"&gt;comments powered by Disqus.&lt;/a&gt;&lt;/noscript&gt;</span></div></pre></td></tr></table></figure></p>
<p>Disqus가 들어갈 부분에 위 코드를 넣으니 해결!</p>
<p>테마 적용후 deploy 했는데 반영되는데 시간이 꽤 걸리나보다. 계속 깨져보이길래 제대로 deploy 안된줄알고 구글링중이었는데, 몇분 지나니까 잘 반영돼 있음.</p>
]]></content>
      
        
        <tags>
            
            <tag> blog </tag>
            
            <tag> github </tag>
            
            <tag> hexo </tag>
            
        </tags>
        
    </entry>
    
  
  
</search>
