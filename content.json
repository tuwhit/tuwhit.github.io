{"meta":{"title":"개발새발 블로그","subtitle":"개발새발 블로그","description":null,"author":"Hyunkyung Ahn","url":"https://tuwhit.github.io"},"pages":[],"posts":[{"title":"AWS 도커 컨테이너 배포 자동화 실습","slug":"code-deploy","date":"2017-10-27T12:51:05.000Z","updated":"2017-10-27T13:26:18.000Z","comments":true,"path":"2017/10/27/code-deploy/","link":"","permalink":"https://tuwhit.github.io/2017/10/27/code-deploy/","excerpt":"","text":"3일전 Gaming on AWS에 참석해서 ‘도커 컨테이너 배포 자동화 실습’을 진행했다. 회사에서도 도커 컨테이너를 이용해서 배포를 하고있어서(수동이지만) 적용해볼 수 있을것 같다. 당일에는 실습자료를 보고 따라하기 급급했어서 다시 한번 정리해봤다. CodePipeline으로 배포 프로세스를 구성하고 S3에 저장된 소스코드를 CodeBuild를 통해 컴파일 및 컨테이너 이미지 생성한다. 그리고 CloudFormation을 이용해 ECS에 배포한다. CodePipeline 생성 Source provider는 소스코드가 저장된 S3 버킷으로 설정하고 CodeBuild를 build provider로 선택 코드가 build되어 생성된 컨테이너 이미지는 ECR repository에 저장 환경 설정 파일도 S3에 저장하고 CodePipeline 에서 해당 파일을 사용하는 Source 액션 추가 Dockerize 하는 액션 추가 (여기까지가 Build 스테이지) Deploy 스테이지 추가 CloudFormation으로 환경설정 파일을 참조하여 deploy 설정 완료 후 S3에 환경 설정 파일, 어플리케이션을 업로드하면 CodePipeline 에서 변경사항을 감지하여 배포작업을 수행한다. 왕신기. 추가적으로 Lambda를 이용해서 Blue/Green 배포도 가능하다. 현재 리얼 환경이 아닌 곳으로 배포하고 수동 승인과정을 거치면 환경을 Swap 하도록 할 수 있다. 간단히 정리해놔서 그렇지 실제로 콘솔에서 설정해줘야 하는 것들이 굉장히 많았다. 그 하나하나를 이해하기는 좀 어려워서 따로 공부가 필요할 것 같다. 그리고 실습에서 제공된 환경설정파일들도 실제 서비스 환경설정파일들이랑 같이 보면 좋을듯.","categories":[],"tags":[{"name":"deploy","slug":"deploy","permalink":"https://tuwhit.github.io/tags/deploy/"},{"name":"AWS","slug":"AWS","permalink":"https://tuwhit.github.io/tags/AWS/"},{"name":"CodePipeline","slug":"CodePipeline","permalink":"https://tuwhit.github.io/tags/CodePipeline/"}]},{"title":"개복치같은 서버를 살리기위한 삽질기(ing)","slug":"server-sabjil","date":"2017-10-13T11:15:21.000Z","updated":"2017-10-13T11:29:18.000Z","comments":true,"path":"2017/10/13/server-sabjil/","link":"","permalink":"https://tuwhit.github.io/2017/10/13/server-sabjil/","excerpt":"","text":"작년에 신규 프로젝트를 진행하면서 기존 ruby 서버가 아닌 python 으로 별도의 서버를 띄웠다. Java로 된 별도의 암호화모듈을 사용해야해서 Py4J을 이용했다. 그런데 이 라이브러리의 문제인지 메모리 누수 때문인지 원인은 모르겠지만 2-3주정도 주기로 암호화모듈쪽에서 에러가 나기 시작하면서 그 이후의 모든 요청에서 같은 에러가 발생했다. 기존에 url lib 를 썼던것을 requests 를 사용하도록 수정했지만 에러 발생주기가 조금 길어졌을 뿐 해결이 되지않았다. 일단 원인을 찾는것은 뒤로 미루고 Lambda와 Cloud Watch를 이용해서 매일 새벽2시에 인스턴스를 리붓시키도록 했다. 1234567891011var AWS = require('aws-sdk');exports.handler = (event, context, callback) =&gt; &#123; var ec2 = new AWS.EC2(&#123;region: 'ap-northeast-2'&#125;); ec2.rebootInstances(&#123;InstanceIds : ['instance-ID'] &#125;,function (err, data) &#123; if (err) console.log(err.stack); else console.log(data); context.done(err,data); &#125;);&#125;; 이후 몇달간 서버에 이상이 없는듯 하더니 어느날 아예 500에러가 나기시작했다. -_- 원인을 찾아보려 서버에 접속해봤더니 컨테이너가 아예 없었다. 리붓하면서 컨테이너가 제대로 생성되지 않은것 같았다. Docker 관련 지식이 얕아 원인을 알수가 없어서 일단 인스턴스를 새로 생성하는 것으로 해결을 했다. 그리고 UptimeRobot을 이용해 5분에 한번 서버에 request를 보내고, 문제가 있으면 slack으로 alert message를 남기도록 했다. 이걸 5분만에 설정할수있다니 21세기 스고이 그런데 깜빡하고 Lambda 코드에 바뀐 인스턴스 ID로 수정하지 않아서(아오) 3주뒤 또 암호화 모듈 에러가 발생했다. 이런 휴먼에러를 발생시키지 않기위해 코드를 몇줄 더 추가했다. ㅠㅠ12345678910111213141516171819202122232425262728293031323334353637383940414243444546var AWS = require('aws-sdk');var https = require('https');var util = require('util');var POST_OPTIONS = &#123; hostname: 'hooks.slack.com', path: 'slack web-hook url', method: 'POST',&#125;;exports.handler = (event, context, callback) =&gt; &#123; var ec2 = new AWS.EC2(&#123;region: 'ap-northeast-2'&#125;); const failed_message = &#123; channel: 'service-alerts', text: 'Instace Reboot Failed' &#125;; // check if instance exists ec2.describeInstances(&#123;InstanceIds : ['instance-ID']&#125;, function (err, data)&#123; if (err) &#123; // if doesn't exist, send slack alert var r = https.request(POST_OPTIONS, function(res) &#123; res.setEncoding('utf8'); res.on('data', function (data) &#123; context.succeed(\"Message Sent: \" + data); &#125;); &#125;).on(\"error\", function(e) &#123;context.fail(\"Failed: \" + e);&#125; ); r.write(util.format(\"%j\", failed_message)); r.end(); &#125; else &#123; // exist // reboot instance ec2.rebootInstances(&#123;InstanceIds : ['instance-ID'] &#125;,function (err, data) &#123; if (err) &#123; // send slack alert var r = https.request(POST_OPTIONS, function(res) &#123; res.setEncoding('utf8'); res.on('data', function (data) &#123; context.succeed(\"Message Sent: \" + data); &#125;); &#125;).on(\"error\", function(e) &#123;context.fail(\"Failed: \" + e);&#125; ); r.write(util.format(\"%j\", failed_message)); r.end(); &#125; else console.log(data); context.done(err,data); &#125;); &#125; &#125;);&#125;; 리붓시킬 인스턴스를 먼저 찾고 없으면 슬랙으로 alert message를 보내고, 있으면 해당 인스턴스를 리붓시킨다. 리붓시 에러가 나도 슬랙으로 alert message를 보낸다. 애초에 에러의 원인을 찾아서 해결했어야하는데 다른일들로 시간적 여유가 없다보니 그때그때 서버만 살리고 뒷전으로 미뤄뒀던 것에 반성을… 틈틈히 시간내서 원인파악을 해야겠다.","categories":[],"tags":[{"name":"Server","slug":"Server","permalink":"https://tuwhit.github.io/tags/Server/"},{"name":"Lambda","slug":"Lambda","permalink":"https://tuwhit.github.io/tags/Lambda/"},{"name":"node.js","slug":"node-js","permalink":"https://tuwhit.github.io/tags/node-js/"},{"name":"UptimeRobot","slug":"UptimeRobot","permalink":"https://tuwhit.github.io/tags/UptimeRobot/"},{"name":"Monitoring","slug":"Monitoring","permalink":"https://tuwhit.github.io/tags/Monitoring/"}]},{"title":"UI와 UX에 대한 개념 정리","slug":"til","date":"2017-09-26T13:48:04.000Z","updated":"2017-09-26T15:03:21.000Z","comments":true,"path":"2017/09/26/til/","link":"","permalink":"https://tuwhit.github.io/2017/09/26/til/","excerpt":"","text":"프로젝트 진행중에 UX 설계를 해볼일이 생겼는데, 디알못이라 뭘 어떻게 해야할지 영 감이 잘 안잡혀서 일단 UI, UX의 개념이라도 정리해봤다.(정리하다보니 생각났는데 옛날에 Human Centered Design 스터디를 한적이 있는데, 그것도 UX Design에 속하는 거였나 싶음) UI(User Interface) 일련의 화면, 페이지 및 장치와 상호작용할 때 사용하는 시각적 요소 UX(User Experience) 회사, 서비스 및 제품과 상호 작용하는 사용자의 경험 UX Design 실제 필드에서 사용자를 관찰하고, 그 결과를 바탕으로 디자인 누가, 왜, 무엇을, 어떻게 사용하는지를 고려해야함 어떤 목적인지, 어떤 의도가 있는지, 어떻게 쓰였으면 좋겠는지에 대해 고민 필요 UI와 UX의 차이점(에 대한 전문가들의 생각) UX는 문제를 해결하기위한 사용자의 여정에 포커스를 두고 UI는 제품 표면의 모습과 기능에 초점을 맞춘다. - Ken Norton UX 디자이너는 디자인 프로세스의 개념적 측면에 관심을 가지기 때문에 UI 디자이너는 보다 확실한 요소에 집중할 수 있다. - Andy Budd UX와 UI 디자인은 서로 비교할 수 없는 두가지이므로 차이가 없다. -Craig Morrision UI는 일반적으로 화면 주변의 시각적 디자인 및 정보 디자인에 관한것이다. UX는 완벽한 경험에 관한 것이므로 화면과 관련이 없을 수 있다. - Patrick Neema UI는 제품에 중점을 두고 있으며 일련의 스냅샷을 제시간에 제공한다. UX는 사용자 및 제품을 통한 이동에 초점을 맞춘다. - Scott Jenson UX는 사용자가 제품을 사용하여 얻은 전반적인 경험이며 UI는 사용자가 실제로 상호 작용하고 볼수있는 것이다. - Clayton Yan API 로직을 고려하면서 UX 설계를 하려니 쉬운일이 아닌것같다. UX를 우선으로 하자니 로직 개선하기가 빡세고, 쉽게 가자니 UX가 좋지 않은것 같고… 엉엉","categories":[],"tags":[{"name":"UI","slug":"UI","permalink":"https://tuwhit.github.io/tags/UI/"},{"name":"UX","slug":"UX","permalink":"https://tuwhit.github.io/tags/UX/"},{"name":"Design","slug":"Design","permalink":"https://tuwhit.github.io/tags/Design/"}]},{"title":"블로그 개설","slug":"first-post","date":"2017-09-24T12:00:45.000Z","updated":"2017-09-26T12:21:32.000Z","comments":true,"path":"2017/09/24/first-post/","link":"","permalink":"https://tuwhit.github.io/2017/09/24/first-post/","excerpt":"","text":"Github Pages, Hexo 로 블로그 개설! Jekyll을 이용해서 만들까 하다가 Ruby는 회사에서 많이 쓰니 Node.js 기반인 Hexo로 선택했다. 근데 뭐 Node.js 까막눈이어도 눈칫껏 만져보니 기존 테마에 살짝 커스텀하는 정도는 금방 하는듯. Markdown 문법도 잘 몰라서 Markdown 작성법 보면서 이래저래 써보는 중인데 꽤 재밌다. 블로그 메뉴를 어떻게 나눌지, footer 엔 어떤 위젯을 넣을지, 로고는 뭘로 할지 고민. 10대때 열심히 네이버 블로그 꾸미던 시절 생각난다. 하악하악 재밌어! Daily 테마 위키에 comment field 추가하려면 _config.yml 파일에disqus_shortname: your-disqus-shortname 만 추가해주면 된다고 했는데 코멘트 영역이 안뜸…^ㅅㅠ 다행히 disqus 홈페이지에 들어가보니 site - installation 메뉴에 코드가 제공돼있었다.1234567891011121314151617181920&lt;div id=\"disqus_thread\"&gt;&lt;/div&gt;&lt;script&gt;/*** RECOMMENDED CONFIGURATION VARIABLES: EDIT AND UNCOMMENT THE SECTION BELOW TO INSERT DYNAMIC VALUES FROM YOUR PLATFORM OR CMS.* LEARN WHY DEFINING THESE VARIABLES IS IMPORTANT: https://disqus.com/admin/universalcode/#configuration-variables*//*var disqus_config = function () &#123;this.page.url = PAGE_URL; // Replace PAGE_URL with your page's canonical URL variablethis.page.identifier = PAGE_IDENTIFIER; // Replace PAGE_IDENTIFIER with your page's unique identifier variable&#125;;*/(function() &#123; // DON'T EDIT BELOW THIS LINEvar d = document, s = d.createElement('script');s.src = 'https://tuwhit.disqus.com/embed.js';s.setAttribute('data-timestamp', +new Date());(d.head || d.body).appendChild(s);&#125;)();&lt;/script&gt;&lt;noscript&gt;Please enable JavaScript to view the &lt;a href=\"https://disqus.com/?ref_noscript\"&gt;comments powered by Disqus.&lt;/a&gt;&lt;/noscript&gt; Disqus가 들어갈 부분에 위 코드를 넣으니 해결! 테마 적용후 deploy 했는데 반영되는데 시간이 꽤 걸리나보다. 계속 깨져보이길래 제대로 deploy 안된줄알고 구글링중이었는데, 몇분 지나니까 잘 반영돼 있음.","categories":[],"tags":[{"name":"blog","slug":"blog","permalink":"https://tuwhit.github.io/tags/blog/"},{"name":"github","slug":"github","permalink":"https://tuwhit.github.io/tags/github/"},{"name":"hexo","slug":"hexo","permalink":"https://tuwhit.github.io/tags/hexo/"}]}]}